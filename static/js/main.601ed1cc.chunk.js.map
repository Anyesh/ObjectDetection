{"version":3,"sources":["utils/ObjectDetectionSketch.js","App.js","serviceWorker.js","index.js"],"names":["MODEL_URL","sketch","p","capture","cocossdModel","cocoDrawings","faceDrawings","showCocoSSDResults","results","showFaceDetectionData","data","setup","a","faceapi","createCanvas","constraints","video","mandatory","minWidth","minHeight","optional","maxFrameRate","audio","createCapture","id","size","hide","cocoSsd","then","model","e","console","log","catch","draw","background","image","fill","map","drawing","textSize","strokeWeight","textX","bbox","textY","confidenetext","score","toFixed","textWidth","itemTextWidth","class","text","stroke","rect","detection","box","_x","_width","_y","_height","confidencetext","gender","agetext","age","ageTextWidth","copiedExpression","expressions","Object","keys","key","max","Math","expressiontext","filter","expressionWidth","withAgeAndGender","withFaceExpressions","loadedmetadata","detect","document","getElementById","App","objectDetectionSketch","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.601ed1cc.chunk.js","sourcesContent":["import * as p5 from \"p5\";\r\nimport \"p5/lib/addons/p5.dom\";\r\nimport * as cocoSsd from \"@tensorflow-models/coco-ssd\";\r\nimport * as faceapi from \"face-api.js\";\r\n\r\nconst MODEL_URL = \"/models\";\r\n\r\nexport default function sketch(p) {\r\n  let capture = null;\r\n  let cocossdModel = null;\r\n\r\n  let cocoDrawings = [];\r\n  let faceDrawings = [];\r\n\r\n  function showCocoSSDResults(results) {\r\n    cocoDrawings = results;\r\n  }\r\n\r\n  function showFaceDetectionData(data) {\r\n    faceDrawings = data;\r\n  }\r\n\r\n  p.setup = async () => {\r\n    await faceapi.loadSsdMobilenetv1Model(MODEL_URL);\r\n    await faceapi.loadAgeGenderModel(MODEL_URL);\r\n    await faceapi.loadFaceExpressionModel(MODEL_URL);\r\n\r\n    p.createCanvas(1280, 720);\r\n    const constraints = {\r\n      video: {\r\n        mandatory: {\r\n          minWidth: 1280,\r\n          minHeight: 720\r\n        },\r\n        optional: [{ maxFrameRate: 40 }]\r\n      },\r\n      audio: false\r\n    };\r\n\r\n    capture = p.createCapture(constraints, () => {});\r\n\r\n    capture.id(\"video_element\");\r\n    capture.size(1280, 720);\r\n    capture.hide();\r\n\r\n    cocoSsd\r\n      .load()\r\n      .then(model => {\r\n        try {\r\n          cocossdModel = model;\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        console.log(\"Error occured : \", e);\r\n      });\r\n  };\r\n\r\n  p.draw = async () => {\r\n    if (!capture) {\r\n      return;\r\n    }\r\n    p.background(255);\r\n    p.image(capture, 0, 0);\r\n    p.fill(0, 0, 0, 0);\r\n\r\n    cocoDrawings.map(drawing => {\r\n      if (drawing) {\r\n        p.textSize(20);\r\n        p.strokeWeight(1);\r\n        const textX = drawing.bbox[0] + drawing.bbox[2];\r\n        const textY = drawing.bbox[1] + drawing.bbox[3];\r\n\r\n        const confidenetext = \"Confidence: \" + drawing.score.toFixed(1);\r\n        const textWidth = p.textWidth(confidenetext);\r\n\r\n        const itemTextWidth = p.textWidth(drawing.class);\r\n        p.text(drawing.class, textX - itemTextWidth - 10, textY - 50);\r\n\r\n        p.text(confidenetext, textX - textWidth - 10, textY - 10);\r\n        p.strokeWeight(4);\r\n        p.stroke(\"rgb(100%,100%,100%)\");\r\n        p.rect(\r\n          drawing.bbox[0],\r\n          drawing.bbox[1],\r\n          drawing.bbox[2],\r\n          drawing.bbox[3]\r\n        );\r\n      }\r\n    });\r\n\r\n    faceDrawings.map(drawing => {\r\n      if (drawing) {\r\n        p.textSize(15);\r\n        p.strokeWeight(1);\r\n\r\n        const textX = drawing.detection.box._x + drawing.detection.box._width;\r\n        const textY = drawing.detection.box._y + drawing.detection.box._height;\r\n\r\n        const confidencetext = \"Gender: \" + drawing.gender;\r\n        const textWidth = p.textWidth(confidencetext);\r\n        p.text(confidencetext, textX - textWidth - 10, textY - 60);\r\n\r\n        const agetext = \"Age: \" + drawing.age.toFixed(0);\r\n        const ageTextWidth = p.textWidth(agetext);\r\n        p.text(agetext, textX - ageTextWidth - 10, textY - 30);\r\n\r\n        const copiedExpression = drawing.expressions;\r\n        const expressions = Object.keys(copiedExpression).map(key => {\r\n          const value = copiedExpression[key];\r\n          return value;\r\n        });\r\n\r\n        const max = Math.max(...expressions);\r\n\r\n        const expression_value = Object.keys(copiedExpression).filter(key => {\r\n          return copiedExpression[key] === max;\r\n        })[0];\r\n\r\n        const expressiontext = \"Mood: \" + expression_value;\r\n        const expressionWidth = p.textWidth(expressiontext);\r\n        p.text(expressiontext, textX - expressionWidth - 10, textY - 10);\r\n\r\n        p.strokeWeight(4);\r\n        p.stroke(\"rgb(100%,100%,100%)\");\r\n        p.rect(\r\n          drawing.detection.box._x,\r\n          drawing.detection.box._y,\r\n          drawing.detection.box._width,\r\n          drawing.detection.box._height\r\n        );\r\n      }\r\n    });\r\n    faceapi\r\n      .detectAllFaces(capture.id())\r\n      .withAgeAndGender()\r\n      .withFaceExpressions()\r\n      .then(data => {\r\n        showFaceDetectionData(data);\r\n      });\r\n\r\n    if (capture.loadedmetadata) {\r\n      if (cocossdModel) {\r\n        cocossdModel\r\n          .detect(document.getElementById(\"video_element\"))\r\n          .then(showCocoSSDResults)\r\n          .catch(e => {\r\n            console.log(\"Exception : \", e);\r\n          });\r\n      }\r\n    }\r\n  };\r\n}\r\n","import React from \"react\";\nimport objectDetectionSketch from \"./utils/ObjectDetectionSketch\";\n\nimport P5Wrapper from \"react-p5-wrapper\";\n\nfunction App() {\n  return <P5Wrapper sketch={objectDetectionSketch} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}